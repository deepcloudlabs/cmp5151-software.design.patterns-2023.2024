server.port=10200
server.address=localhost

# retry configuration
resilience4j.retry.instances.critical.max-attempts=5
resilience4j.retry.instances.critical.wait-duration=1s
resilience4j.retry.instances.critical.retry-exceptions=java.lang.Throwable
resilience4j.retry.instances.critical.enable-exponential-backoff=true
resilience4j.retry.instances.critical.exponential-backoff-multiplier=2

# rate-limiter configuration
resilience4j.ratelimiter.instances.critical.limit-for-period=5
resilience4j.ratelimiter.instances.critical.limit-refresh-period=5s
resilience4j.ratelimiter.instances.critical.timeout-duration=1s
resilience4j.ratelimiter.instances.critical.event-consumer-buffer-size=10

# time-limiter configuration
resilience4j.timelimiter.instances.critical.timeout-duration=3
resilience4j.timelimiter.instances.critical.cancel-running-future=true

# circuit-breaker configuration
# closed state --> open state
resilience4j.circuitbreaker.instances.fun.failure-rate-threshold=20
# open state -- after 3 seconds -> half-open state 
resilience4j.circuitbreaker.instances.fun.wait-duration-in-open-state=3s
# half-open state --> open state 
resilience4j.circuitbreaker.instances.fun.max-wait-duration-in-half-open-state=5s
# half-open state --> closed state 
resilience4j.circuitbreaker.instances.fun.permitted-number-of-calls-in-half-open-state=10
resilience4j.circuitbreaker.instances.fun.minimum-number-of-calls=8

resilience4j.bulkhead.instances.run.max-concurrent-calls=40
resilience4j.bulkhead.instances.run.event-consumer-buffer-size=100
resilience4j.bulkhead.instances.run.max-wait-duration=10s